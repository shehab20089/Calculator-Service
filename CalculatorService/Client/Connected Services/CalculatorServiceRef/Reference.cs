//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.CalculatorServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/CalculatorServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool addAuthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool divAuthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool multiAuthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool subAuthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int userIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool addAuth {
            get {
                return this.addAuthField;
            }
            set {
                if ((this.addAuthField.Equals(value) != true)) {
                    this.addAuthField = value;
                    this.RaisePropertyChanged("addAuth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool divAuth {
            get {
                return this.divAuthField;
            }
            set {
                if ((this.divAuthField.Equals(value) != true)) {
                    this.divAuthField = value;
                    this.RaisePropertyChanged("divAuth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool multiAuth {
            get {
                return this.multiAuthField;
            }
            set {
                if ((this.multiAuthField.Equals(value) != true)) {
                    this.multiAuthField = value;
                    this.RaisePropertyChanged("multiAuth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool subAuth {
            get {
                return this.subAuthField;
            }
            set {
                if ((this.subAuthField.Equals(value) != true)) {
                    this.subAuthField = value;
                    this.RaisePropertyChanged("subAuth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userID {
            get {
                return this.userIDField;
            }
            set {
                if ((this.userIDField.Equals(value) != true)) {
                    this.userIDField = value;
                    this.RaisePropertyChanged("userID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorServiceRef.ICalculatorService")]
    public interface ICalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/CheckAuthentications", ReplyAction="http://tempuri.org/ICalculatorService/CheckAuthenticationsResponse")]
        Client.CalculatorServiceRef.User CheckAuthentications(string userNm, string userPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/CheckAuthentications", ReplyAction="http://tempuri.org/ICalculatorService/CheckAuthenticationsResponse")]
        System.Threading.Tasks.Task<Client.CalculatorServiceRef.User> CheckAuthenticationsAsync(string userNm, string userPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/addUser", ReplyAction="http://tempuri.org/ICalculatorService/addUserResponse")]
        void addUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/addUser", ReplyAction="http://tempuri.org/ICalculatorService/addUserResponse")]
        System.Threading.Tasks.Task addUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/ADD", ReplyAction="http://tempuri.org/ICalculatorService/ADDResponse")]
        double ADD(int userId, double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/ADD", ReplyAction="http://tempuri.org/ICalculatorService/ADDResponse")]
        System.Threading.Tasks.Task<double> ADDAsync(int userId, double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Subtract", ReplyAction="http://tempuri.org/ICalculatorService/SubtractResponse")]
        double Subtract(int userId, double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Subtract", ReplyAction="http://tempuri.org/ICalculatorService/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(int userId, double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Divided", ReplyAction="http://tempuri.org/ICalculatorService/DividedResponse")]
        double Divided(int userId, double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Divided", ReplyAction="http://tempuri.org/ICalculatorService/DividedResponse")]
        System.Threading.Tasks.Task<double> DividedAsync(int userId, double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Multiplay", ReplyAction="http://tempuri.org/ICalculatorService/MultiplayResponse")]
        double Multiplay(int userId, double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Multiplay", ReplyAction="http://tempuri.org/ICalculatorService/MultiplayResponse")]
        System.Threading.Tasks.Task<double> MultiplayAsync(int userId, double num1, double num2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceChannel : Client.CalculatorServiceRef.ICalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<Client.CalculatorServiceRef.ICalculatorService>, Client.CalculatorServiceRef.ICalculatorService {
        
        public CalculatorServiceClient() {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.CalculatorServiceRef.User CheckAuthentications(string userNm, string userPass) {
            return base.Channel.CheckAuthentications(userNm, userPass);
        }
        
        public System.Threading.Tasks.Task<Client.CalculatorServiceRef.User> CheckAuthenticationsAsync(string userNm, string userPass) {
            return base.Channel.CheckAuthenticationsAsync(userNm, userPass);
        }
        
        public void addUser() {
            base.Channel.addUser();
        }
        
        public System.Threading.Tasks.Task addUserAsync() {
            return base.Channel.addUserAsync();
        }
        
        public double ADD(int userId, double num1, double num2) {
            return base.Channel.ADD(userId, num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> ADDAsync(int userId, double num1, double num2) {
            return base.Channel.ADDAsync(userId, num1, num2);
        }
        
        public double Subtract(int userId, double num1, double num2) {
            return base.Channel.Subtract(userId, num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(int userId, double num1, double num2) {
            return base.Channel.SubtractAsync(userId, num1, num2);
        }
        
        public double Divided(int userId, double num1, double num2) {
            return base.Channel.Divided(userId, num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> DividedAsync(int userId, double num1, double num2) {
            return base.Channel.DividedAsync(userId, num1, num2);
        }
        
        public double Multiplay(int userId, double num1, double num2) {
            return base.Channel.Multiplay(userId, num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplayAsync(int userId, double num1, double num2) {
            return base.Channel.MultiplayAsync(userId, num1, num2);
        }
    }
}
